---
bibliography: references.bib
---

# Introduction {.unnumbered}

![[@team2022]](https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Pandas_logo.svg/2560px-Pandas_logo.svg.png){fig-align="left" width="1000"}

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE) 

options(repos = list(CRAN = "http://cran.rstudio.com/"))

library(reticulate)

py_install("pandas")

py_install("seaborn")

py_install("scikit-learn")
```

[Exploratory data analysis](https://en.wikipedia.org/wiki/Exploratory_data_analysis) is an essential first step towards determining the validity of your data and should be performed throughout the data pipeline. However, EDA is often performed too late or not at all. The \[Python programming language\](https://en.wikipedia.org/wiki/Python\_(programming_language), is a widely used open source platform for [data analysis](https://en.wikipedia.org/wiki/Data_analysis) and [data visualization](https://en.wikipedia.org/wiki/Data_and_information_visualization). This is because of the variety of libraries available and attentive community devoted to data analysis.

Here, we utilize the [pandas](https://pandas.pydata.org/) and [pandas-profiling](https://github.com/ydataai/pandas-profiling) libraries to conduct preliminary exploratory data analysis aimed at diagnosing any major issues with an imported data set. pandas and pandas-profiling offers a clean and straightforward methodology to uncover issues such as data [outliers](https://en.wikipedia.org/wiki/Outlier), [missing data](https://en.wikipedia.org/wiki/Missing_data), as well as summary statistical reports.

## What is Exploratory Data Analysis?

Exploratory data analysis is a [statistical](https://en.wikipedia.org/wiki/Statistics), approach towards analyzing [data sets](https://en.wikipedia.org/wiki/Data_set) to investigate and summarize their main characteristics, often through [statistical graphics](https://en.wikipedia.org/wiki/Statistical_graphics) and other data visualization methods.

```{python req-setup-EDAplot}
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statistics as stat
from sklearn import preprocessing as pproc

# increase font size of all elements
sns.set(font_scale = 2.33)

# Read csv 
data = pd.read_csv("data/diabetes.csv")

def Age_group_data(data): 
  if data.Age >= 21 and data.Age <= 30: return "Young"
  elif data.Age > 30 and data.Age <= 50: return "Middle" 
  else: return "Elderly"

data['Age_group'] = data.apply(Age_group_data, axis = 1)

dataplot = data[["Age_group", "Glucose", "Insulin", "BMI"]]

sns.set_style("white")

g = sns.PairGrid(dataplot, hue = "Age_group", height = 5)
g1 = g.map_upper(sns.scatterplot, alpha = 0.5, s = 100)
g2 = g1.map_diag(sns.kdeplot, fill = True, linewidth = 3)
g3 = g2.map_lower(sns.kdeplot, levels = 5, alpha = 0.75)

plt.show()
```

------------------------------------------------------------------------

## What are Some Important Data Set Characteristics?

There are several characteristics that are arguably important, but we will only consider those covered in this workshop series. Let's start with the fundamentals that will help guide us.

## Diagnostics

When importing data sets, it is important to consider characteristics about the data columns, rows, and individual cells.

------------------------------------------------------------------------

### Variables

Name of each variable

```{python data-head}
data.head()
```

### Types

Data type of each variable

```{python data-types}
data.dtypes
```

#### **Numerical**: Continuous

Measurable numbers that are fractional or decimal and cannot be counted (e.g., time, height, weight)

```{python plot-continuous}
sns.set(font_scale = 1.25)

# Change seaborn plot theme to white
sns.set_style("white")
sns.kdeplot(x = "BMI", 
  data = data, linewidth = 3) 

plt.show()
```

#### **Numerical**: Discrete

Countable whole numbers or integers (e.g., number of successes or failures)

```{python plot-discrete}
sns.set_style("white")

line = sns.countplot(data = data, x = "Outcome", hue = "Age_group")

line.set(xlabel='Outcome', ylabel='Count')

line.legend(labels = ["Middle", "Young", "Elderly"], title = "Age group", fontsize = 'medium', title_fontsize = "15")

plt.show()
```

------------------------------------------------------------------------

#### **Categorical**: Nominal

Labeling variables without any order or quantitative value (e.g., hair color, nationality)

```{python plot-nominal}
def Outcome_data(data): 
  if data.Outcome == 1: return "Yes"
  else: return "No"

data['Outcome1'] = data.apply(Outcome_data, axis = 1)

sns.set_style("white")

sns.stripplot(data = data, x = "Outcome1", y = "BMI", alpha = 0.5, hue = "Outcome1", s = 5)

plt.show()
```

#### **Categorical: Ordinal**

Where there is a hierarchical order along a scale (e.g., ranks, letter grades, age groups)

```{python plot-ordinal}
sns.set_style("white")

AgeStrip = sns.stripplot(data = data, x = "Age_group", y = "BMI", alpha = 0.5, hue = "Age_group", s = 15)

AgeStrip.set(xlabel = 'Age group', ylabel = 'BMI')

plt.show()
```

### Missing Values (NAs)

Cells, rows, or columns without data

-   Missing percent: percentage of missing values \* Unique count: number of unique values.

-   Unique rate: rate of unique value - unique count / total number of observations.

```{python NAs}
dataNA = data

for col in dataNA.columns:
    dataNA.loc[dataNA.sample(frac = 0.1).index, col] = np.nan

dataNA.head()
```

------------------------------------------------------------------------

## Summary Statistics

Above we described some properties of data. However, you will need to know some descriptive characteristics of your data before you can move forward. Enter, [summary statistics](https://en.wikipedia.org/wiki/Summary_statistics).

Summary statistics allow you to summarize large amounts of information about your data as quickly as possible.

### Central Tendency

Measuring a central property of your data. Some examples you've probably heard of are:

-   Mean: Average value

-   Median: Middle value

-   Mode: Most common value

```{python cent-tend}
kde = sns.kdeplot(data = data, x = "BMI", linewidth = 3, color = "black")
kde.axvline(x = data.BMI.mean(), ymin = 0, ymax = max(data.BMI), linewidth = 3, color = 'gray', linestyle='--')
plt.show()
```

Notice that all values of central tendency can be pretty similar in this figure.

```{python norm-plot}
mode_Ins = stat.mode(data.Insulin)


kde1 = sns.kdeplot(data = data, x = "Insulin", linewidth = 3, color = "black")
kde1.axvline(x = data.Insulin.mean(), ymin = 0, ymax = max(data.Insulin), linewidth = 3, color = 'red', linestyle='--')
kde1.axvline(x = data.Insulin.median(), ymin = 0, ymax = max(data.Insulin), linewidth = 3, color = '#0072B2', linestyle='--')
kde1.axvline(x = mode_Ins, ymin = 0, ymax = max(data.Insulin), linewidth = 3, color = 'gray', linestyle='--')

kde1.text(125, 0.00445, "Mean", horizontalalignment = 'left', size= 'medium', color = 'red', weight = 'semibold')

kde1.text(125, 0.0038, "Median", horizontalalignment = 'left', size= 'medium', color = '#0072B2', weight = 'semibold')

kde1.text(125, 0.0032, "Mode", horizontalalignment = 'left', size= 'medium', color = 'gray', weight = 'semibold')

plt.show()
```

However, in this figure, all measures are different. This will be important when we discuss statistical dispersion in chapter 3.

```{python bug-fix, output = FALSE}
sns.kdeplot(x = "BMI", 
  data = data) 
plt.show()
```

### Statistical Dispersion

Measure of data variability, scatter, or spread. Some examples you may have heard of:

-   Standard deviation (SD): The amount of variation that occurs in a set of values.

-   Interquartile range (IQR): The difference between the 75th and 25th percentiles

-   Outliers: A value outside of $1.5 * IQR$

```{python stat-dispersion}

q3, q1 = np.percentile(data.BMI, [75 ,25])

med_BMI = data.BMI.median()

# Histogram
hist1 = sns.histplot(data = data, x = "BMI", element = "step", color = "#0072B2")

# Vertical line, mean - sd of BMI
hist1.axvline(x = 24.10842, ymin = 0, ymax = 80, linewidth = 3, color = 'black', linestyle='--')

# Vertical line, mean + sd of BMI
hist1.axvline(x = 39.87674, ymin = 0, ymax = 80, linewidth = 3, color = 'black', linestyle='--')

# Mean point of BMI, goes in the middle of the two above verticle lines
hist1.plot(data.BMI.mean(), 30, marker = "o", markersize = 7, markeredgecolor = "black", markerfacecolor = "black")

# Line segment representing SD of BMI
hist1.plot([24.10842, 39.87674], [30, 30], linewidth = 3, color = 'black')

# Text annotation for mean point of BMI
hist1.text(data.BMI.mean(), 32, "Mean", horizontalalignment = 'center', size= 'medium', color = 'black')

# Text annotation for SD of BMI 
hist1.text(35, 26, "SD", horizontalalignment = 'left', size= 'medium', color = 'black')

# BOXPLOT 
# Second x-axis
ax2 = hist1.twinx()

PROPS = {
    'boxprops':{'facecolor':'white', 'edgecolor':'black'},
    'medianprops':{'color':'black'},
    'whiskerprops':{'color':'black'},
    'capprops':{'color':'black'}
}

sns.boxplot(data = data, x = "BMI", ax = ax2, width = 0.05, linewidth = 3, color = 'white', **PROPS, flierprops = dict(marker = 'o', markersize = 5, markerfacecolor = 'black', markeredgecolor = 'black'))

# Text annotation for Median of BMI (boxplot 50th percentile)
hist1.text(32, 50, "Median", horizontalalignment = 'center', size = 'medium', color = 'black')

# Text annotation for 25th percentile of BMI 
hist1.text(28, 37.5, "25th", horizontalalignment = 'center', size = 'medium', color = 'black')
 
# Text annotation for 75th percentile of BMI 
hist1.text(36, 37.5, "75th", horizontalalignment = 'center', size = 'medium', color = 'black')

# Text annotation for max value outlier for BMI 
hist1.text(66, 50, "Outlier", horizontalalignment = 'center', size = 'medium', color = 'black')

# Line segment that points to the max value outlier for BMI  
hist1.plot([67.1, 66.5], [47, 48.5], linewidth = 2, color = 'black')

plt.show()
```

### Distribution Shape {#sec-distribution-shape}

Measures of describing the shape of a distribution, usually compared to a normal distribution (bell-curve)

-   Skewness: The symmetry of the distribution

-   Kurtosis: The tailedness of the distribution

```{python dist-shape}
minmax_Insulin = pproc.minmax_scale(data.Insulin)

minmax_Glucose = pproc.minmax_scale(data.Glucose)

GluIns = sns.kdeplot(data = data, x = minmax_Insulin, linewidth = 3, color = "black")

sns.kdeplot(data = data, x = minmax_Glucose, linewidth = 3, color = "black", linestyle='--')

GluIns.set(xlabel = 'Min-Max Centered Insulin and Glucose', ylabel = 'Density')

GluIns.text(0.175, 4.5, "Insulin \nSkewness = 2.27 \nKurtosis = 7.21", horizontalalignment = 'left', size = 'medium', color = 'black')

GluIns.text(0.5, 3.05, "Glucose \nSkewness = 0.174 \nKurtosis = 0.641", horizontalalignment = 'left', size = 'medium', color = 'black')

GluIns.plot([0.075, 0.165], [5, 5], linewidth = 2, color = 'black')

GluIns.plot([0.6, 0.6], [2.75, 2.95], linewidth = 2, color = 'black')

sns.kdeplot(data = data, x = minmax_Glucose, linewidth = 3, color = "black", linestyle='--')

plt.show()
```

### Statistical Dependence (Correlation)

Measure of causality between two random variables (statistically). Notably, we approximate causality with correlations (see [correlation $\neq$ causation](https://en.wikipedia.org/wiki/Correlation_does_not_imply_causation#:~:text=The%20phrase%20%22correlation%20does%20not,association%20or%20correlation%20between%20them.))

-   Numerical values, but you can compare numericals across categories (see the first plot above).

```{python correlation}
# increase font size of all elements
sns.set(font_scale = 1.5)

# Subset of data that I want
df = data.drop(['Age_group', 'DiabetesPedigreeFunction', 'Pregnancies', 'BloodPressure', 'SkinThickness', 'Outcome1'], axis = 1)

# Compute the correlation matrix
corr = df.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype = bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize = (9, 9))

# Generate a custom diverging color map
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws= {"shrink": .5})
            
# Tight margins for plot
plt.tight_layout()
            
plt.show()
```
